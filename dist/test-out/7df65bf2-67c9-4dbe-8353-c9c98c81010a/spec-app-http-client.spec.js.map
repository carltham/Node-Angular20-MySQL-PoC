{
  "version": 3,
  "sources": ["src/app/http-client.spec.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport {\n  HttpClientTestingModule,\n  HttpTestingController,\n} from \"@angular/common/http/testing\";\nimport { TestBed, fakeAsync, inject, tick } from \"@angular/core/testing\";\nimport { Data } from \"@angular/router\";\nimport { UserAPIService } from \"./services/user-api.service\";\n\nconst testUrl = \"/api/users\";\ndescribe(\"HttpClient testing\", () => {\n  let httpClient: HttpClient;\n  let httpTestingController: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [],\n    });\n\n    // Inject the http service and test controller for each test\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n  });\n  /// Tests begin ///\n  it(\"can test HttpClient.get\", () => {\n    const testData: Data = { name: \"Test Data\" };\n\n    // Make an HTTP GET request\n    httpClient.get<Data>(testUrl).subscribe((data) =>\n      // When observable resolves, result should match test data\n      expect(data).toEqual(testData)\n    );\n\n    // The following `expectOne()` will match the request's URL.\n    // If no requests or multiple requests matched that URL\n    // `expectOne()` would throw.\n    const req = httpTestingController.expectOne(testUrl);\n\n    // Assert that the request is a GET.\n    expect(req.request.method).toEqual(\"GET\");\n\n    // Respond with mock data, causing Observable to resolve.\n    // Subscribe callback asserts that correct data was returned.\n    req.flush(testData);\n\n    // Finally, assert that there are no outstanding requests.\n    httpTestingController.verify();\n  });\n});\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    imports: [\n      HttpClientTestingModule, // angular testing module that provides mocking for http connections\n    ],\n    // Add here declaration of your services or components and use inject to get to them in tests\n    providers: [UserAPIService],\n  });\n});\n\nit(\"should request data from server\", fakeAsync(\n  inject(\n    [HttpTestingController, UserAPIService],\n    (\n      httpMock: HttpTestingController, // this part will help us in testing\n      service: UserAPIService // tested service\n    ) => {\n      // Arrange\n      let result: any = \"no one expects spanish inquisition\";\n      const data = { some: \"data\", wasMocked: true };\n      const expected = { ...data, wasMocked: true }; // or whatever your data service does with returned data\n\n      // Act\n      service\n        .getAll()\n        // we just care about what we get in the end\n        .subscribe((data) => (result = data));\n\n      // Assert\n      httpMock.expectOne(testUrl).flush(data);\n      tick();\n\n      expect(result).toEqual(expected); // after processing server response\n      // check if there arent any other not handled requests\n      httpMock.verify();\n    }\n  )\n));\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACAA;AAIA;AAEA;AAEA,IAAM,UAAU;AAChB,SAAS,sBAAsB,MAAK;AAClC,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAK;AACd,YAAQ,uBAAuB;MAC7B,SAAS,CAAA;KACV;AAGD,iBAAa,QAAQ,OAAO,UAAU;AACtC,4BAAwB,QAAQ,OAAO,qBAAqB;EAC9D,CAAC;AAED,KAAG,2BAA2B,MAAK;AACjC,UAAM,WAAiB,EAAE,MAAM,YAAW;AAG1C,eAAW,IAAU,OAAO,EAAE,UAAU,CAAC;;MAEvC,OAAO,IAAI,EAAE,QAAQ,QAAQ;KAAC;AAMhC,UAAM,MAAM,sBAAsB,UAAU,OAAO;AAGnD,WAAO,IAAI,QAAQ,MAAM,EAAE,QAAQ,KAAK;AAIxC,QAAI,MAAM,QAAQ;AAGlB,0BAAsB,OAAM;EAC9B,CAAC;AACH,CAAC;AAED,WAAW,MAAK;AACd,UAAQ,uBAAuB;IAC7B,SAAS;MACP;;;;IAGF,WAAW,CAAC,cAAc;GAC3B;AACH,CAAC;AAED,GAAG,mCAAmC,UACpC,OACE,CAAC,uBAAuB,cAAc,GACtC,CACE,UACA,YACE;AAEF,MAAI,SAAc;AAClB,QAAM,OAAO,EAAE,MAAM,QAAQ,WAAW,KAAI;AAC5C,QAAM,WAAW,iCAAK,OAAL,EAAW,WAAW,KAAI;AAG3C,UACG,OAAM,EAEN,UAAU,CAACC,UAAU,SAASA,KAAK;AAGtC,WAAS,UAAU,OAAO,EAAE,MAAM,IAAI;AACtC,OAAI;AAEJ,SAAO,MAAM,EAAE,QAAQ,QAAQ;AAE/B,WAAS,OAAM;AACjB,CAAC,CACF,CACF;",
  "names": ["init_testing", "data"]
}
